{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\n\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n// const calendar = document.querySelector(\"#datetimepkr\");\n// const btn = document.querySelector(\"[data-start]\");\n\n// let userSelectedDate;\n// let intervalId;\n\n// const options = {\n//   enableTime: true,\n//   time_24hr: true,\n//   defaultDate: new Date(),\n//   minuteIncrement: 1,\n//   onClose(selectedDates) {\n//     userSelectedDate = selectedDates[0]; \n//     let ms = userSelectedDate - new Date(); \n//     if (ms < 1) {\n//       iziToast.error({\n//         color: 'red',\n//         position: 'topRight',\n//         message: `Please choose a date in the future`,\n//       });\n//     } else {\n//       btn.disabled = false;\n//       calendar.disabled = true;\n//     }\n//   },\n// };\n\n// userSelectedDate = flatpickr(calendar, options);\n\n// console.log(userSelectedDate.selectedDates[0].getTime());\n\n// function timer() {\n//   clearInterval(intervalId);\n//   let currentDate = new Date();\n//   let targetDate = userSelectedDate.selectedDates[0];\n//   let ms = targetDate - currentDate; \n//   updateTimerDisplay(ms);\n  \n//   intervalId = setInterval(() => {\n//     ms -= 1000;\n//     updateTimerDisplay(ms);\n//     if (ms <= 0) {\n//       clearInterval(intervalId);\n//       showSuccessMessage('Success!');\n//     }\n//   }, 1000);\n// }\n\n// function showSuccessMessage(message) {\n//   iziToast.success({\n//     title: 'Success',\n//     message: message,\n//   });\n// }\n\n// function showErrorMessage(message) {\n//   iziToast.error({\n//     title: 'Error',\n//     message: message,\n//   });\n// }\n\n// function updateElement(selector, value) {\n//   document.querySelector(selector).textContent = value >= 0 ? addLeadingZero(value) : '00';\n// }\n\n// function updateTimerDisplay(ms) {\n//   const {days, hours, minutes, seconds } = convertMs(ms);\n//   updateElement(\"[data-days]\", days);\n//   updateElement(\"[data-hours]\", hours);\n//   updateElement(\"[data-minutes]\", minutes);\n//   updateElement(\"[data-seconds]\", seconds);\n// }\n\n// function convertMs(ms) {\n//   // Number of milliseconds per unit of time\n//   const second = 1000;\n//   const minute = second * 60;\n//   const hour = minute * 60;\n//   const day = hour * 24;\n\n//   // Remaining days\n//   const days = Math.floor(ms / day);\n//   // Remaining hours\n//   const hours = Math.floor((ms % day) / hour);\n//   // Remaining minutes\n//   const minutes = Math.floor(((ms % day) % hour) / minute);\n//   // Remaining seconds\n//   const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n//   return { days, hours, minutes, seconds };\n// }\n\n// console.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\n// console.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\n// console.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}\n\n// btn.addEventListener(\"click\", timer);\n// document.addEventListener('DOMContentLoaded', () => { btn.disabled = true; });\n\n\n// Get the necessary elements from the HTML\nconst startButton = document.querySelector('[data-start]');\nconst daysField = document.querySelector('[data-days]');\nconst hoursField = document.querySelector('[data-hours]');\nconst minutesField = document.querySelector('[data-minutes]');\nconst secondsField = document.querySelector('[data-seconds]');\n\n// Initialize Flatpickr on the input element\nconst inputElement = document.querySelector('#datetime-picker');\nflatpickr(inputElement, {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const selectedDate = selectedDates[0];\n    const currentDate = new Date();\n    if (selectedDate < currentDate) {\n      // Show an error message if a past date is selected\n      alert('Please choose a date in the future');\n      startButton.disabled = true;\n    } else {\n      startButton.disabled = false;\n    }\n  },\n});\n\n// Add a click event listener to the start button\nstartButton.addEventListener('click', () => {\n  // Disable the start button and input element\n  startButton.disabled = true;\n  inputElement.disabled = true;\n\n  // Get the selected date from the input element\n  const selectedDate = inputElement.valueAsNumber;\n\n  // Initialize the interval for the timer\n  const intervalId = setInterval(() => {\n    // Calculate the remaining time until the selected date\n    const remainingTime = selectedDate - new Date();\n    if (remainingTime <= 0) {\n      // Clear the interval and show a success message if the remaining time is zero\n      clearInterval(intervalId);\n      alert('Success!');\n      return;\n    }\n\n    // Format the remaining time as a string\n    const days = String(Math.floor(remainingTime / (1000 * 60 * 60 * 24))).padStart(2, '0');\n    const hours = String(Math.floor((remainingTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))).padStart(2, '0');\n    const minutes = String(Math.floor((remainingTime % (1000 * 60 * 60)) / (1000 * 60))).padStart(2, '0');\n    const seconds = String(Math.floor((remainingTime % (1000 * 60)) / 1000)).padStart(2, '0');\n\n    // Update the timer fields with the formatted remaining time\n    daysField.textContent = days;\n    hoursField.textContent = hours;\n    minutesField.textContent = minutes;\n    secondsField.textContent = seconds;\n  }, 1000);\n});\n\n"],"names":["startButton","daysField","hoursField","minutesField","secondsField","inputElement","flatpickr","selectedDates","selectedDate","intervalId","remainingTime","days","hours","minutes","seconds"],"mappings":"0xBA4GA,MAAMA,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAY,SAAS,cAAc,aAAa,EAChDC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAe,SAAS,cAAc,gBAAgB,EACtDC,EAAe,SAAS,cAAc,gBAAgB,EAGtDC,EAAe,SAAS,cAAc,kBAAkB,EAC9DC,EAAUD,EAAc,CACtB,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQE,EAAe,CACAA,EAAc,CAAC,EAChB,IAAI,MAGtB,MAAM,oCAAoC,EAC1CP,EAAY,SAAW,IAEvBA,EAAY,SAAW,EAE1B,CACH,CAAC,EAGDA,EAAY,iBAAiB,QAAS,IAAM,CAE1CA,EAAY,SAAW,GACvBK,EAAa,SAAW,GAGxB,MAAMG,EAAeH,EAAa,cAG5BI,EAAa,YAAY,IAAM,CAEnC,MAAMC,EAAgBF,EAAe,IAAI,KACzC,GAAIE,GAAiB,EAAG,CAEtB,cAAcD,CAAU,EACxB,MAAM,UAAU,EAChB,MACD,CAGD,MAAME,EAAO,OAAO,KAAK,MAAMD,GAAiB,IAAO,GAAK,GAAK,GAAG,CAAC,EAAE,SAAS,EAAG,GAAG,EAChFE,EAAQ,OAAO,KAAK,MAAOF,GAAiB,IAAO,GAAK,GAAK,KAAQ,IAAO,GAAK,GAAG,CAAC,EAAE,SAAS,EAAG,GAAG,EACtGG,EAAU,OAAO,KAAK,MAAOH,GAAiB,IAAO,GAAK,KAAQ,IAAO,GAAG,CAAC,EAAE,SAAS,EAAG,GAAG,EAC9FI,EAAU,OAAO,KAAK,MAAOJ,GAAiB,IAAO,IAAO,GAAI,CAAC,EAAE,SAAS,EAAG,GAAG,EAGxFT,EAAU,YAAcU,EACxBT,EAAW,YAAcU,EACzBT,EAAa,YAAcU,EAC3BT,EAAa,YAAcU,CAC5B,EAAE,GAAI,CACT,CAAC"}